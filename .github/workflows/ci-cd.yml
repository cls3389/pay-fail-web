name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      # 如果需要测试数据库或其他服务，可以在这里添加

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        # 如果有测试文件，运行测试
        if [ -f "test_*.py" ]; then
          python -m pytest -v
        else
          echo "No test files found"
        fi

    - name: Lint with flake8
      run: |
        pip install flake8
        # 运行基本的代码检查
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image with cache
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.github
        push: false
        tags: excel-processor:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Test Docker image
      run: |
        # 创建必要的目录
        mkdir -p uploads output logs
        
        # 测试Docker镜像是否能正常启动
        docker run --rm -d --name test-container \
          -p 4009:4009 \
          -v $(pwd)/uploads:/app/uploads \
          -v $(pwd)/output:/app/output \
          -v $(pwd)/logs:/app/logs \
          excel-processor:latest
        
        # 等待容器启动
        sleep 15
        
        # 检查容器是否运行正常
        if docker ps | grep test-container; then
          echo "✅ Docker container is running"
          
          # 等待应用完全启动
          sleep 5
          
          # 测试健康检查端点
          for i in {1..5}; do
            if curl -f http://localhost:4009/health; then
              echo "✅ Health check passed"
              break
            else
              echo "⏳ Waiting for health check... ($i/5)"
              sleep 3
            fi
          done
          
          # 测试主页
          curl -f http://localhost:4009/ || echo "⚠️ Main page check failed"
          
        else
          echo "❌ Docker container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # 清理测试容器
        docker stop test-container

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        # 这里可以添加实际的部署脚本，比如：
        # - 推送到Docker Hub
        # - 部署到云平台
        # - 触发服务器更新
